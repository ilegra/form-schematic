import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup<% if (formJsonObj.required.length > 0) { %>, Validators <% }%> } from '@angular/forms';
import { <%= classify(name) %>Interface } from './<%= dasherize(name)%>.model';

@Component({
  selector: '<%= prefix %>-<%= dasherize(name) %>-form',
  templateUrl: './<%= dasherize(name) %>-form.component.html',
  styleUrls: ['./<%= dasherize(name) %>-form.component.<%= style %>']<% if(!!viewEncapsulation) { %>,
  encapsulation: ViewEncapsulation.<%= viewEncapsulation %><% } if (changeDetection !== 'Default') { %>,
  changeDetection: ChangeDetectionStrategy.<%= changeDetection %><% } %>
})
export class <%= classify(name) %>FormComponent implements OnInit {
  public <%= camelize(name) %>Form: FormGroup;

  constructor(private fb: FormBuilder) { }

  ngOnInit() {
     this.<%= camelize(name) %>Form = this.initializeForm();
  }

  private initializeForm() {
     return this.fb.group({<% for(let prop of formJsonObj.properties) { %>
       <%= prop.key %>: [<% if (prop.disabled) { %>{ value: '', disabled: true }<% } else { %>null<% } %><% if (formJsonObj.required.includes(prop.key)) { %>, [Validators.required] <% } %>], <% } %>
     })
  }

  onSubmit() {
    console.log(this.getFormValue());
    alert('form submitted');
    alert(JSON.stringify(this.getFormValue()));
  }

  onReset() {
    this.<%= camelize(name) %>Form.reset();
  }

  getFormValue(): <%= classify(name) %>Interface {
    return this.<%= camelize(name) %>Form.value;
  }

  getFormControlValue(formControlName: string) {
    return this.<%= camelize(name) %>Form.get(formControlName).value;
  }
}